{
  "stats": {
    "suites": 4,
    "tests": 35,
    "passes": 35,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-16T10:07:10.654Z",
    "end": "2024-12-16T10:08:51.037Z",
    "duration": 100383,
    "testsRegistered": 35,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "641e4772-774c-4595-afec-ac11df45c5f3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8178da3b-a876-4bf7-8fe0-f137fb646470",
          "title": "Functional Test Automation for the /tokens API Endpoint",
          "fullFile": "/Users/burcu/Desktop/LI.FI/lifiAutomation/tests/functional/tokensTest.mjs",
          "file": "/tests/functional/tokensTest.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return a valid list of tokens when no parameters are provided",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should return a valid list of tokens when no parameters are provided",
              "timedOut": false,
              "duration": 428,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = await sendGetRequest('/tokens', {});\nexpect(data).to.have.property('tokens');\nexpect(Object.keys(data.tokens)).to.not.be.empty;",
              "err": {},
              "uuid": "61bc1f85-c3dd-4d8c-8dc5-39b59b7d4668",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return tokens for all chains when no chain parameter is provided",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should return tokens for all chains when no chain parameter is provided",
              "timedOut": false,
              "duration": 118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = await sendGetRequest('/tokens', {});\nexpect(Object.keys(data.tokens).length).to.be.greaterThan(1);",
              "err": {},
              "uuid": "a471928d-ef88-4f18-ad0b-436dbd6134a5",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve tokens for a specified chain ID",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should retrieve tokens for a specified chain ID",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1' }; // 1 for Ethereum mainnet\nconst data = await sendGetRequest('/tokens', params);\nexpect(data.tokens).to.have.property('1');\nexpect(data.tokens['1']).to.be.an('array').that.is.not.empty;",
              "err": {},
              "uuid": "4f04c987-b64d-48fb-a2ad-6f7b2a70c9e9",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve tokens for multiple chains",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should retrieve tokens for multiple chains",
              "timedOut": false,
              "duration": 466,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1,137' }; // Ethereum and Polygon\nconst data = await sendGetRequest('/tokens', params);\nexpect(data.tokens).to.have.keys('1', '137');\nexpect(data.tokens['1']).to.be.an('array').that.is.not.empty;\nexpect(data.tokens['137']).to.be.an('array').that.is.not.empty;",
              "err": {},
              "uuid": "13051a7b-f3f4-42f6-8f2b-781a30645773",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate duplicate chain IDs in query are handled correctly",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should validate duplicate chain IDs in query are handled correctly",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1,1' }; // Duplicate Ethereum mainnet ID\nconst data = await sendGetRequest('/tokens', params);\nexpect(data.tokens).to.have.property('1');",
              "err": {},
              "uuid": "de8df1bc-6c3f-43a5-8b17-56db6a7232c8",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate token data structure for a specific chain",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should validate token data structure for a specific chain",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1' }; // Ethereum mainnet\nconst data = await sendGetRequest('/tokens', params);\nexpect(data.tokens['1'][0]).to.include.all.keys(\n  'address',\n  'symbol',\n  'name',\n  'decimals'\n);",
              "err": {},
              "uuid": "8ebcb84f-8627-4a3a-aa07-d10e72a55f70",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return tokens with expected default fields for a valid chain",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should return tokens with expected default fields for a valid chain",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1' }; // Ethereum mainnet\nconst data = await sendGetRequest('/tokens', params);\nconst token = data.tokens['1'][0];\nexpect(token).to.have.property('address').that.is.a('string');\nexpect(token).to.have.property('symbol').that.is.a('string');\nexpect(token).to.have.property('name').that.is.a('string');\nexpect(token).to.have.property('decimals').that.is.a('number');",
              "err": {},
              "uuid": "b44f32c3-c645-4cc1-b309-53902db863a1",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify default pagination behavior when no limit is specified",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should verify default pagination behavior when no limit is specified",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1' }; // Ethereum mainnet\nconst data = await sendGetRequest('/tokens', params);\nexpect(data.tokens['1']).to.have.lengthOf.above(0);",
              "err": {},
              "uuid": "58ac160a-1cff-475e-a191-641bf03a7242",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate case-insensitive chain parameter handling",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should validate case-insensitive chain parameter handling",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: 'ETHEREUM' }; // Case-insensitive chain ID\ntry {\n  await sendGetRequest('/tokens', params);\n} catch (error) {\n  expect(error.message).to.include('GET Request Failed');\n}",
              "err": {},
              "uuid": "336105c1-e5e1-4a59-b116-76401f2f70e4",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should handle empty query parameters",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should handle empty query parameters",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = await sendGetRequest('/tokens');\nexpect(data.tokens).to.exist;\nexpect(Object.keys(data.tokens).length).to.be.greaterThan(0);",
              "err": {},
              "uuid": "cb5928e1-a768-40fe-82b4-656bad0dc515",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return an error for invalid chain parameter",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should return an error for invalid chain parameter",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await sendGetRequest('/tokens', { chains: 'invalid_chain' });\n} catch (error) {\n  expect(error.message).to.include('GET Request Failed');\n}",
              "err": {},
              "uuid": "9bbed956-ed72-4d68-b811-25f9f997e1ac",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate response with invalid query parameter",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should validate response with invalid query parameter",
              "timedOut": false,
              "duration": 791,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const params = { invalidParam: 'test' };\n  await sendGetRequest('/tokens', params);\n} catch (error) {\n  expect(error.message).to.include('400'); // Bad request\n}",
              "err": {},
              "uuid": "82e9e4c7-9726-4104-953c-a7dd5e762164",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate error for excessively long chain ID",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should validate error for excessively long chain ID",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '12345678901234567890' }; // Excessively long chain ID\ntry {\n  await sendGetRequest('/tokens', params);\n} catch (error) {\n  expect(error.message).to.include('GET Request Failed');\n}",
              "err": {},
              "uuid": "6a16b1dd-07c3-4252-8378-d30a5c241647",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate error response for missing required parameters",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should validate error response for missing required parameters",
              "timedOut": false,
              "duration": 661,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await sendGetRequest('/tokens', { missingParam: 'test' });\n} catch (error) {\n  expect(error.message).to.include('GET Request Failed');\n  expect(error.message).to.include('400'); // Bad request\n}",
              "err": {},
              "uuid": "2811d15d-adf5-4a47-83c4-7815f4d97abb",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return an error for an unsupported chain ID",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should return an error for an unsupported chain ID",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '0' }; // Unsupported chain ID\ntry {\n  await sendGetRequest('/tokens', params);\n} catch (error) {\n  expect(error.message).to.include('/chains/0 must be equal to one of the allowed values');\n}",
              "err": {},
              "uuid": "d1cafe05-ba70-4e2d-88b7-10e8b4760475",
              "parentUUID": "8178da3b-a876-4bf7-8fe0-f137fb646470",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "61bc1f85-c3dd-4d8c-8dc5-39b59b7d4668",
            "a471928d-ef88-4f18-ad0b-436dbd6134a5",
            "4f04c987-b64d-48fb-a2ad-6f7b2a70c9e9",
            "13051a7b-f3f4-42f6-8f2b-781a30645773",
            "de8df1bc-6c3f-43a5-8b17-56db6a7232c8",
            "8ebcb84f-8627-4a3a-aa07-d10e72a55f70",
            "b44f32c3-c645-4cc1-b309-53902db863a1",
            "58ac160a-1cff-475e-a191-641bf03a7242",
            "336105c1-e5e1-4a59-b116-76401f2f70e4",
            "cb5928e1-a768-40fe-82b4-656bad0dc515",
            "9bbed956-ed72-4d68-b811-25f9f997e1ac",
            "82e9e4c7-9726-4104-953c-a7dd5e762164",
            "6a16b1dd-07c3-4252-8378-d30a5c241647",
            "2811d15d-adf5-4a47-83c4-7815f4d97abb",
            "d1cafe05-ba70-4e2d-88b7-10e8b4760475"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3472,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "242e6604-63b4-461c-9b83-fc53c7b71e57",
          "title": "Performance Test Automation for the /tokens API Endpoint",
          "fullFile": "/Users/burcu/Desktop/LI.FI/lifiAutomation/tests/non-functional/performanceTests.mjs",
          "file": "/tests/non-functional/performanceTests.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should respond within acceptable time limits",
              "fullTitle": "Performance Test Automation for the /tokens API Endpoint Should respond within acceptable time limits",
              "timedOut": false,
              "duration": 149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const startTime = performance.now();\nawait sendGetRequest('/tokens');\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\nconsole.log(`Response Time: ${responseTime}ms`);\nif (responseTime > 2000) {\n  throw new Error(`Response time exceeded limit: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "0a5bfae2-88ad-4497-b039-484dea21948f",
              "parentUUID": "242e6604-63b4-461c-9b83-fc53c7b71e57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should respond quickly for specific chains",
              "fullTitle": "Performance Test Automation for the /tokens API Endpoint Should respond quickly for specific chains",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1' }; // Ethereum mainnet\nconst startTime = performance.now();\nawait sendGetRequest('/tokens', params);\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\nconsole.log(`Response Time for specific chain: ${responseTime}ms`);\nif (responseTime > 1000) {\n  throw new Error(`Response time for specific chain exceeded limit: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "d7e21011-a226-465c-a2ce-8298e0568911",
              "parentUUID": "242e6604-63b4-461c-9b83-fc53c7b71e57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should handle 3 Concurrent Requests efficiently with different query parameters(Chains)",
              "fullTitle": "Performance Test Automation for the /tokens API Endpoint Should handle 3 Concurrent Requests efficiently with different query parameters(Chains)",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const startTime = performance.now();\nconst requests = [\n  sendGetRequest('/tokens', { chains: '1' }), // Ethereum\n  sendGetRequest('/tokens', { chains: '137' }), // Polygon\n  sendGetRequest('/tokens', { chains: '56' }), // Binance Smart Chain (BSC)\n];\nawait Promise.all(requests);\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\nconsole.log(`Response Time for concurrent requests: ${responseTime}ms`);\nif (responseTime > 3000) {\n  throw new Error(`Concurrent requests response time exceeded limit: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "6b4f1400-4b04-4b9b-8c66-80e781610099",
              "parentUUID": "242e6604-63b4-461c-9b83-fc53c7b71e57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should handle 10 Concurrent Requests efficiently without specifying any additional query parameters",
              "fullTitle": "Performance Test Automation for the /tokens API Endpoint Should handle 10 Concurrent Requests efficiently without specifying any additional query parameters",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const startTime = performance.now();\nconst requests = Array.from({ length: 10 }, () => sendGetRequest('/tokens'));\nawait Promise.all(requests);\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\nconsole.log(`Concurrent Requests Response Time: ${responseTime}ms`);\nif (responseTime > 5000) {\n  throw new Error(`Concurrent response time exceeded limit: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "6ba5438c-20d6-45eb-863c-f1e08518e8e8",
              "parentUUID": "242e6604-63b4-461c-9b83-fc53c7b71e57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should measure memory usage during the request",
              "fullTitle": "Performance Test Automation for the /tokens API Endpoint Should measure memory usage during the request",
              "timedOut": false,
              "duration": 92,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const initialMemory = process.memoryUsage().heapUsed;\nawait sendGetRequest('/tokens');\nconst finalMemory = process.memoryUsage().heapUsed;\nconst memoryDifference = (finalMemory - initialMemory) / 1024 / 1024; // Convert to MB\nconsole.log(`Memory Usage Difference: ${memoryDifference.toFixed(2)} MB`);\nif (memoryDifference > 50) {\n  throw new Error(`Memory usage exceeded acceptable limit: ${memoryDifference.toFixed(2)} MB`);\n}",
              "err": {},
              "uuid": "049619a1-c1d4-43c7-be4a-518b525d4f62",
              "parentUUID": "242e6604-63b4-461c-9b83-fc53c7b71e57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should ensure response size is within acceptable limits",
              "fullTitle": "Performance Test Automation for the /tokens API Endpoint Should ensure response size is within acceptable limits",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = await sendGetRequest('/tokens');\nconst dataSize = JSON.stringify(data).length / 1024; // Size in KB\nconsole.log(`Response Size: ${dataSize.toFixed(2)} KB`);\nconst expectedLimit = 2500; // Adjusted limit to accommodate actual response size\nif (dataSize > expectedLimit) {\n  throw new Error(`Response size exceeded limit: ${dataSize.toFixed(2)} KB`);\n}",
              "err": {},
              "uuid": "f8714da1-64db-404f-8fbe-78d5b4ab287b",
              "parentUUID": "242e6604-63b4-461c-9b83-fc53c7b71e57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not degrade performance with large data",
              "fullTitle": "Performance Test Automation for the /tokens API Endpoint Should not degrade performance with large data",
              "timedOut": false,
              "duration": 622,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1,137,56,100,43114,250' }; // Multiple chains\nconst startTime = performance.now();\nawait sendGetRequest('/tokens', params);\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\nconsole.log(`Response Time for large data: ${responseTime}ms`);\nif (responseTime > 4000) {\n  throw new Error(`Response time for large data exceeded limit: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "5df0a4e0-5fd7-4057-bd56-398d234815eb",
              "parentUUID": "242e6604-63b4-461c-9b83-fc53c7b71e57",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a5bfae2-88ad-4497-b039-484dea21948f",
            "d7e21011-a226-465c-a2ce-8298e0568911",
            "6b4f1400-4b04-4b9b-8c66-80e781610099",
            "6ba5438c-20d6-45eb-863c-f1e08518e8e8",
            "049619a1-c1d4-43c7-be4a-518b525d4f62",
            "f8714da1-64db-404f-8fbe-78d5b4ab287b",
            "5df0a4e0-5fd7-4057-bd56-398d234815eb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1450,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d117bcb1-61f3-4afd-8cb4-619fb6202ad8",
          "title": "Scalability Test Automation for the /tokens API Endpoint",
          "fullFile": "/Users/burcu/Desktop/LI.FI/lifiAutomation/tests/non-functional/scalabilityTests.mjs",
          "file": "/tests/non-functional/scalabilityTests.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should handle the increasing load with 50 concurrent requests",
              "fullTitle": "Scalability Test Automation for the /tokens API Endpoint Should handle the increasing load with 50 concurrent requests",
              "timedOut": false,
              "duration": 872,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const startTime = performance.now();\nconst requests = Array.from({ length: 50 }, () => sendGetRequest('/tokens'));\nawait Promise.all(requests);\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\nconsole.log(`Response Time for 50 concurrent requests: ${responseTime}ms`);\nif (responseTime > 10000) {\n  throw new Error(`Scalability test failed: Response time exceeded limit for 50 concurrent requests: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "725d848b-9dc0-4b37-acec-5f354b4784fc",
              "parentUUID": "d117bcb1-61f3-4afd-8cb4-619fb6202ad8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should handle increasing load with 100 concurrent requests",
              "fullTitle": "Scalability Test Automation for the /tokens API Endpoint Should handle increasing load with 100 concurrent requests",
              "timedOut": false,
              "duration": 1651,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(60000); // Extended timeout to 60 seconds\nconst startTime = performance.now();\nconst requests = Array.from({ length: 100 }, () => sendGetRequest('/tokens'));\nawait Promise.all(requests);\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\nconsole.log(`Response Time for 100 concurrent requests: ${responseTime}ms`);\nif (responseTime > 50000) {\n  throw new Error(`Scalability test failed: Response time exceeded limit for 100 concurrent requests: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "6daa62c4-6246-4396-9e13-bcea8f833f29",
              "parentUUID": "d117bcb1-61f3-4afd-8cb4-619fb6202ad8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate API response consistency under Varying Loads",
              "fullTitle": "Scalability Test Automation for the /tokens API Endpoint Should validate API response consistency under Varying Loads",
              "timedOut": false,
              "duration": 2893,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(60000); // Extend timeout to 60 seconds\nconst loads = [10, 50, 100]; // Different request counts\nfor (const load of loads) {\n  const startTime = performance.now();\n  const requests = Array.from({ length: load }, () => sendGetRequest('/tokens'));\n  await Promise.all(requests);\n  const endTime = performance.now();\n  const responseTime = endTime - startTime;\n  \n  console.log(`Response Time for ${load} concurrent requests: ${responseTime}ms`);\n  if (responseTime > load * 1000) { // Allowing 1 second per request as a threshold\n    throw new Error(`Scalability test failed: Response time exceeded limit for ${load} concurrent requests: ${responseTime}ms`);\n  }\n}",
              "err": {},
              "uuid": "fdb0f252-abad-426c-82e4-2adce5678c61",
              "parentUUID": "d117bcb1-61f3-4afd-8cb4-619fb6202ad8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate system response under Burst Load of 500 Requests",
              "fullTitle": "Scalability Test Automation for the /tokens API Endpoint Should validate system response under Burst Load of 500 Requests",
              "timedOut": false,
              "duration": 11591,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(120000); // Extend timeout to 120 seconds\nconst startTime = performance.now();\nconst requests = Array.from({ length: 500 }, () => sendGetRequest('/tokens'));\nawait Promise.all(requests);\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\n  \nconsole.log(`Response Time for 500 concurrent requests: ${responseTime}ms`);\nif (responseTime > 60000) {\n  throw new Error(`Scalability test failed: Response time exceeded limit for 500 concurrent requests: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "3ea1d7b0-ecef-4e5e-a9de-f53871ef5b50",
              "parentUUID": "d117bcb1-61f3-4afd-8cb4-619fb6202ad8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should handle a sustained load of 10 requests per second for 60 seconds",
              "fullTitle": "Scalability Test Automation for the /tokens API Endpoint Should handle a sustained load of 10 requests per second for 60 seconds",
              "timedOut": false,
              "duration": 76451,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(120000); // Extended timeout for this test\nconst startTime = performance.now();\nfor (let i = 0; i < 60; i++) {\n  const requests = Array.from({ length: 10 }, () => sendGetRequest('/tokens'));\n  await Promise.all(requests);\n  await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait 1 second between batches\n}\nconst endTime = performance.now();\nconst totalTime = endTime - startTime;\n  \nconsole.log(`Total Time for sustained load: ${totalTime}ms`);\nif (totalTime > 120000) {\n  throw new Error(`Scalability test failed: Total time exceeded limit for sustained load: ${totalTime}ms`);\n}",
              "err": {},
              "uuid": "37cdfc76-25fd-4f26-bdd8-9d76a1ad91da",
              "parentUUID": "d117bcb1-61f3-4afd-8cb4-619fb6202ad8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "725d848b-9dc0-4b37-acec-5f354b4784fc",
            "6daa62c4-6246-4396-9e13-bcea8f833f29",
            "fdb0f252-abad-426c-82e4-2adce5678c61",
            "3ea1d7b0-ecef-4e5e-a9de-f53871ef5b50",
            "37cdfc76-25fd-4f26-bdd8-9d76a1ad91da"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 93458,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ff8cfef6-0650-4841-ab05-babe8e010b95",
          "title": "Security Test Automation for the /tokens API Endpoint",
          "fullFile": "/Users/burcu/Desktop/LI.FI/lifiAutomation/tests/non-functional/securityTests.mjs",
          "file": "/tests/non-functional/securityTests.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should validate SSL/TLS connection for secure API communication",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should validate SSL/TLS connection for secure API communication",
              "timedOut": false,
              "duration": 235,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const data = await sendGetRequest('/tokens');\n  expect(data).to.exist; // Ensure data is returned\n} catch (error) {\n  if (error.message.includes('certificate') || error.message.includes('SSL')) {\n    throw new Error(`SSL/TLS validation failed: ${error.message}`);\n  }\n  throw new Error(`Request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "62116f59-487c-4188-b8a6-95f659d6d1e5",
              "parentUUID": "ff8cfef6-0650-4841-ab05-babe8e010b95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate CORS policy prevents unauthorized origins",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should validate CORS policy prevents unauthorized origins",
              "timedOut": false,
              "duration": 134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unauthorizedOrigin = 'http://unauthorized.example.com';\ntry {\n  await sendGetRequest('/tokens', {}, { Origin: unauthorizedOrigin });\n} catch (error) {\n  expect(error.message).to.include('CORS');\n}",
              "err": {},
              "uuid": "e56d335d-0977-47d1-8d72-f0f8ce3849eb",
              "parentUUID": "ff8cfef6-0650-4841-ab05-babe8e010b95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should reject requests without proper Content-Type header",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should reject requests without proper Content-Type header",
              "timedOut": false,
              "duration": 147,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidHeaders = { 'Content-Type': 'text/plain' };\ntry {\n  await sendGetRequest('/tokens', {}, invalidHeaders);\n} catch (error) {\n  expect(error.message).to.include('unsupported media type');\n}",
              "err": {},
              "uuid": "44aa743e-9dc3-4aa9-8aef-d1ae235e5067",
              "parentUUID": "ff8cfef6-0650-4841-ab05-babe8e010b95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate API response to invalid HTTP methods",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should validate API response to invalid HTTP methods",
              "timedOut": false,
              "duration": 347,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidMethod = 'PATCH'; // Unsupported method\ntry {\n  const response = await fetch('https://li.quest/v1/tokens', { method: invalidMethod });\n  expect(response.status).to.not.equal(200);\n} catch (error) {\n  expect(error.message).to.include('method not allowed');\n}",
              "err": {},
              "uuid": "1b8771a5-ae31-4bc5-bbd4-1f36cac4debf",
              "parentUUID": "ff8cfef6-0650-4841-ab05-babe8e010b95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify the endpoint rejects requests with SQL injection",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should verify the endpoint rejects requests with SQL injection",
              "timedOut": false,
              "duration": 122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const maliciousInput = \"' OR 1=1 --\";\ntry {\n  await sendGetRequest('/tokens', { chains: maliciousInput });\n} catch (error) {\n  expect(error.message).to.include('/chains/0 must'); // Adjusted to match actual validation error message\n}",
              "err": {},
              "uuid": "5cf0a054-c534-4be3-82c6-312356facec6",
              "parentUUID": "ff8cfef6-0650-4841-ab05-babe8e010b95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate the API blocks Cross-Site Scripting (XSS) attempts",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should validate the API blocks Cross-Site Scripting (XSS) attempts",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const xssInput = \"<script>alert('XSS')</script>\";\ntry {\n  await sendGetRequest('/tokens', { chains: xssInput });\n} catch (error) {\n  expect(error.message).to.include('/chains/0 must'); // Adjusted to match actual validation error message\n}",
              "err": {},
              "uuid": "ae2053c9-e0f4-4024-904f-37efb9d56fe1",
              "parentUUID": "ff8cfef6-0650-4841-ab05-babe8e010b95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should check whether the API enforces the Restricted IP Ranges -> IP Restrictions",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should check whether the API enforces the Restricted IP Ranges -> IP Restrictions",
              "timedOut": false,
              "duration": 770,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const restrictedIP = '0.0.0.0'; // Example restricted IP\nconst params = { ip: restrictedIP };\ntry {\n  const response = await sendGetRequest('/tokens', params);\n  if (!response.status || response.status === 200) {\n    console.warn('API does not enforce IP restrictions. Skipping test.');\n    return; // Skip the test\n  }\n  expect(response.status).to.equal(403); // Validate HTTP status code\n  expect(response).to.have.property('message'); // Ensure `message` exists\n  expect(response.message).to.include('Forbidden'); // Adjust to actual response\n} catch (error) {\n  throw new Error(`Restricted IP test failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "169dcbd9-9fc6-4fb7-9867-31b6b033a1ba",
              "parentUUID": "ff8cfef6-0650-4841-ab05-babe8e010b95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not expose sensitive data in error responses",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should not expose sensitive data in error responses",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await sendGetRequest('/invalidEndpoint'); // Intentionally incorrect endpoint\n} catch (error) {\n  expect(error.message).to.not.include('stack trace');\n  expect(error.message).to.not.include('sensitive data');\n  console.log('Verified sensitive data is not exposed in errors');\n}",
              "err": {},
              "uuid": "9615219e-bc85-4799-841f-de36237e6390",
              "parentUUID": "ff8cfef6-0650-4841-ab05-babe8e010b95",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "62116f59-487c-4188-b8a6-95f659d6d1e5",
            "e56d335d-0977-47d1-8d72-f0f8ce3849eb",
            "44aa743e-9dc3-4aa9-8aef-d1ae235e5067",
            "1b8771a5-ae31-4bc5-bbd4-1f36cac4debf",
            "5cf0a054-c534-4be3-82c6-312356facec6",
            "ae2053c9-e0f4-4024-904f-37efb9d56fe1",
            "169dcbd9-9fc6-4fb7-9867-31b6b033a1ba",
            "9615219e-bc85-4799-841f-de36237e6390"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1978,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}