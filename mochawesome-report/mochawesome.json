{
  "stats": {
    "suites": 4,
    "tests": 35,
    "passes": 35,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-16T11:33:24.286Z",
    "end": "2024-12-16T11:34:57.297Z",
    "duration": 93011,
    "testsRegistered": 35,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0af86f79-6a9f-4ef7-b9ea-0874b08cfe73",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
          "title": "Functional Test Automation for the /tokens API Endpoint",
          "fullFile": "/Users/burcu/Desktop/LI.FI/lifiAutomation/tests/functional/tokensTest.mjs",
          "file": "/tests/functional/tokensTest.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return a valid list of tokens when no parameters are provided",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should return a valid list of tokens when no parameters are provided",
              "timedOut": false,
              "duration": 191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = await sendGetRequest('/tokens', {});\nexpect(data).to.have.property('tokens');\nexpect(Object.keys(data.tokens)).to.not.be.empty;",
              "err": {},
              "uuid": "9272425a-8886-4131-a27a-8633782297f3",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return tokens for all chains when no chain parameter is provided",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should return tokens for all chains when no chain parameter is provided",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = await sendGetRequest('/tokens', {});\nexpect(Object.keys(data.tokens).length).to.be.greaterThan(1);",
              "err": {},
              "uuid": "07ab77c4-233b-421e-b22a-e232fbc228a5",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve tokens for a specified chain ID",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should retrieve tokens for a specified chain ID",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1' }; // 1 for Ethereum mainnet\nconst data = await sendGetRequest('/tokens', params);\nexpect(data.tokens).to.have.property('1');\nexpect(data.tokens['1']).to.be.an('array').that.is.not.empty;",
              "err": {},
              "uuid": "da30a59e-e3ef-4ae6-bba7-8f35f65ffaf2",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve tokens for multiple chains",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should retrieve tokens for multiple chains",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1,137' }; // Ethereum and Polygon\nconst data = await sendGetRequest('/tokens', params);\nexpect(data.tokens).to.have.keys('1', '137');\nexpect(data.tokens['1']).to.be.an('array').that.is.not.empty;\nexpect(data.tokens['137']).to.be.an('array').that.is.not.empty;",
              "err": {},
              "uuid": "be16deca-ed94-4450-8410-34cfaea52760",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate duplicate chain IDs in query are handled correctly",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should validate duplicate chain IDs in query are handled correctly",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1,1' }; // Duplicate Ethereum mainnet ID\nconst data = await sendGetRequest('/tokens', params);\nexpect(data.tokens).to.have.property('1');",
              "err": {},
              "uuid": "b3a12948-6a50-4067-b482-f8c7a40f62f8",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate token data structure for a specific chain",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should validate token data structure for a specific chain",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1' }; // Ethereum mainnet\nconst data = await sendGetRequest('/tokens', params);\nexpect(data.tokens['1'][0]).to.include.all.keys(\n  'address',\n  'symbol',\n  'name',\n  'decimals'\n);",
              "err": {},
              "uuid": "bbfbe80c-0dd7-4dc1-b847-ca63381316d5",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return tokens with expected default fields for a valid chain",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should return tokens with expected default fields for a valid chain",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1' }; // Ethereum mainnet\nconst data = await sendGetRequest('/tokens', params);\nconst token = data.tokens['1'][0];\nexpect(token).to.have.property('address').that.is.a('string');\nexpect(token).to.have.property('symbol').that.is.a('string');\nexpect(token).to.have.property('name').that.is.a('string');\nexpect(token).to.have.property('decimals').that.is.a('number');",
              "err": {},
              "uuid": "982ee2cb-7704-4a31-8dce-71f5b75f3148",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify default pagination behavior when no limit is specified",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should verify default pagination behavior when no limit is specified",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1' }; // Ethereum mainnet\nconst data = await sendGetRequest('/tokens', params);\nexpect(data.tokens['1']).to.have.lengthOf.above(0);",
              "err": {},
              "uuid": "1669b3cf-b174-46d3-8487-266ed0e90025",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate case-insensitive chain parameter handling",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should validate case-insensitive chain parameter handling",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: 'ETHEREUM' }; // Case-insensitive chain ID\ntry {\n  await sendGetRequest('/tokens', params);\n} catch (error) {\n  expect(error.message).to.include('GET Request Failed');\n}",
              "err": {},
              "uuid": "65de57e6-9e2b-443d-b5d3-983a9410530e",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should handle empty query parameters",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should handle empty query parameters",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = await sendGetRequest('/tokens');\nexpect(data.tokens).to.exist;\nexpect(Object.keys(data.tokens).length).to.be.greaterThan(0);",
              "err": {},
              "uuid": "f700abc0-0b4d-4331-bf09-b3d1ffc5af05",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return an error for invalid chain parameter",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should return an error for invalid chain parameter",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await sendGetRequest('/tokens', { chains: 'invalid_chain' });\n} catch (error) {\n  expect(error.message).to.include('GET Request Failed');\n}",
              "err": {},
              "uuid": "5c6f5803-36cc-4bd8-bad7-7c5b3f785460",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate response with invalid query parameter",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should validate response with invalid query parameter",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const params = { invalidParam: 'test' };\n  await sendGetRequest('/tokens', params);\n} catch (error) {\n  expect(error.message).to.include('400'); // Bad request\n}",
              "err": {},
              "uuid": "6d978d03-2d83-47c3-9130-c8409aa4cbf4",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate error for excessively long chain ID",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should validate error for excessively long chain ID",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); // Extend timeout to 10 seconds\nconst params = { chains: '12345678901234567890' }; // Excessively long chain ID\ntry {\n  await sendGetRequest('/tokens', params);\n} catch (error) {\n  expect(error.message).to.include('GET Request Failed');\n  expect(error.message).to.include('/chains/0 must'); // Match schema validation error\n}",
              "err": {},
              "uuid": "938bc900-d9bd-41eb-b336-963e4a2c1f9d",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate error response for missing required parameters",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should validate error response for missing required parameters",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); // Extend timeout to 10 seconds\ntry {\n  await sendGetRequest('/tokens', { missingParam: 'test' });\n} catch (error) {\n  expect(error.message).to.include('GET Request Failed');\n  expect(error.message).to.include('400'); // Bad request\n}",
              "err": {},
              "uuid": "c6ebb070-fcee-43e5-944c-473e4b18c59c",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return an error for an unsupported chain ID",
              "fullTitle": "Functional Test Automation for the /tokens API Endpoint Should return an error for an unsupported chain ID",
              "timedOut": false,
              "duration": 474,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '0' }; // Unsupported chain ID\ntry {\n  await sendGetRequest('/tokens', params);\n} catch (error) {\n  expect(error.message).to.include('/chains/0 must be equal to one of the allowed values');\n}",
              "err": {},
              "uuid": "f384b529-bf37-4f7b-bf0c-a7a4a759e662",
              "parentUUID": "55a5b3dd-da44-47d0-8d80-8014421c38bd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9272425a-8886-4131-a27a-8633782297f3",
            "07ab77c4-233b-421e-b22a-e232fbc228a5",
            "da30a59e-e3ef-4ae6-bba7-8f35f65ffaf2",
            "be16deca-ed94-4450-8410-34cfaea52760",
            "b3a12948-6a50-4067-b482-f8c7a40f62f8",
            "bbfbe80c-0dd7-4dc1-b847-ca63381316d5",
            "982ee2cb-7704-4a31-8dce-71f5b75f3148",
            "1669b3cf-b174-46d3-8487-266ed0e90025",
            "65de57e6-9e2b-443d-b5d3-983a9410530e",
            "f700abc0-0b4d-4331-bf09-b3d1ffc5af05",
            "5c6f5803-36cc-4bd8-bad7-7c5b3f785460",
            "6d978d03-2d83-47c3-9130-c8409aa4cbf4",
            "938bc900-d9bd-41eb-b336-963e4a2c1f9d",
            "c6ebb070-fcee-43e5-944c-473e4b18c59c",
            "f384b529-bf37-4f7b-bf0c-a7a4a759e662"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1847,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f8e49678-790e-4559-b5d9-877ae683bfe2",
          "title": "Performance Test Automation for the /tokens API Endpoint",
          "fullFile": "/Users/burcu/Desktop/LI.FI/lifiAutomation/tests/non-functional/performanceTests.mjs",
          "file": "/tests/non-functional/performanceTests.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should respond within acceptable time limits",
              "fullTitle": "Performance Test Automation for the /tokens API Endpoint Should respond within acceptable time limits",
              "timedOut": false,
              "duration": 146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const startTime = performance.now();\nawait sendGetRequest('/tokens');\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\nconsole.log(`Response Time: ${responseTime}ms`);\nif (responseTime > 2000) {\n  throw new Error(`Response time exceeded limit: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "0bad9c4c-47d0-482d-b2f5-a9c22de84c75",
              "parentUUID": "f8e49678-790e-4559-b5d9-877ae683bfe2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should respond quickly for specific chains",
              "fullTitle": "Performance Test Automation for the /tokens API Endpoint Should respond quickly for specific chains",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1' }; // Ethereum mainnet\nconst startTime = performance.now();\nawait sendGetRequest('/tokens', params);\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\nconsole.log(`Response Time for specific chain: ${responseTime}ms`);\nif (responseTime > 1000) {\n  throw new Error(`Response time for specific chain exceeded limit: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "9cc188e8-9ff4-49ba-8a31-b8110b5e24fc",
              "parentUUID": "f8e49678-790e-4559-b5d9-877ae683bfe2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should handle 3 Concurrent Requests efficiently with different query parameters(Chains)",
              "fullTitle": "Performance Test Automation for the /tokens API Endpoint Should handle 3 Concurrent Requests efficiently with different query parameters(Chains)",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const startTime = performance.now();\nconst requests = [\n  sendGetRequest('/tokens', { chains: '1' }), // Ethereum\n  sendGetRequest('/tokens', { chains: '137' }), // Polygon\n  sendGetRequest('/tokens', { chains: '56' }), // Binance Smart Chain (BSC)\n];\nawait Promise.all(requests);\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\nconsole.log(`Response Time for concurrent requests: ${responseTime}ms`);\nif (responseTime > 3000) {\n  throw new Error(`Concurrent requests response time exceeded limit: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "768934ca-831b-4e48-ad4e-7294a3145aa6",
              "parentUUID": "f8e49678-790e-4559-b5d9-877ae683bfe2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should handle 10 Concurrent Requests efficiently without specifying any additional query parameters",
              "fullTitle": "Performance Test Automation for the /tokens API Endpoint Should handle 10 Concurrent Requests efficiently without specifying any additional query parameters",
              "timedOut": false,
              "duration": 213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const startTime = performance.now();\nconst requests = Array.from({ length: 10 }, () => sendGetRequest('/tokens'));\nawait Promise.all(requests);\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\nconsole.log(`Concurrent Requests Response Time: ${responseTime}ms`);\nif (responseTime > 5000) {\n  throw new Error(`Concurrent response time exceeded limit: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "daf4864d-00db-4dbc-a88f-75c369a22c3f",
              "parentUUID": "f8e49678-790e-4559-b5d9-877ae683bfe2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should measure memory usage during the request",
              "fullTitle": "Performance Test Automation for the /tokens API Endpoint Should measure memory usage during the request",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const initialMemory = process.memoryUsage().heapUsed;\nawait sendGetRequest('/tokens');\nconst finalMemory = process.memoryUsage().heapUsed;\nconst memoryDifference = (finalMemory - initialMemory) / 1024 / 1024; // Convert to MB\nconsole.log(`Memory Usage Difference: ${memoryDifference.toFixed(2)} MB`);\nif (memoryDifference > 50) {\n  throw new Error(`Memory usage exceeded acceptable limit: ${memoryDifference.toFixed(2)} MB`);\n}",
              "err": {},
              "uuid": "93d66753-3e5e-4c1e-ba10-97d2b5f15d6c",
              "parentUUID": "f8e49678-790e-4559-b5d9-877ae683bfe2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should ensure response size is within acceptable limits",
              "fullTitle": "Performance Test Automation for the /tokens API Endpoint Should ensure response size is within acceptable limits",
              "timedOut": false,
              "duration": 134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = await sendGetRequest('/tokens');\nconst dataSize = JSON.stringify(data).length / 1024; // Size in KB\nconsole.log(`Response Size: ${dataSize.toFixed(2)} KB`);\nconst expectedLimit = 2500; // Adjusted limit to accommodate actual response size\nif (dataSize > expectedLimit) {\n  throw new Error(`Response size exceeded limit: ${dataSize.toFixed(2)} KB`);\n}",
              "err": {},
              "uuid": "4a159187-55bc-4052-a4c1-a2a5d804290c",
              "parentUUID": "f8e49678-790e-4559-b5d9-877ae683bfe2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not degrade performance with large data",
              "fullTitle": "Performance Test Automation for the /tokens API Endpoint Should not degrade performance with large data",
              "timedOut": false,
              "duration": 89,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = { chains: '1,137,56,100,43114,250' }; // Multiple chains\nconst startTime = performance.now();\nawait sendGetRequest('/tokens', params);\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\nconsole.log(`Response Time for large data: ${responseTime}ms`);\nif (responseTime > 4000) {\n  throw new Error(`Response time for large data exceeded limit: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "dce57451-6042-4ca7-ace1-163ae0cd43a2",
              "parentUUID": "f8e49678-790e-4559-b5d9-877ae683bfe2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0bad9c4c-47d0-482d-b2f5-a9c22de84c75",
            "9cc188e8-9ff4-49ba-8a31-b8110b5e24fc",
            "768934ca-831b-4e48-ad4e-7294a3145aa6",
            "daf4864d-00db-4dbc-a88f-75c369a22c3f",
            "93d66753-3e5e-4c1e-ba10-97d2b5f15d6c",
            "4a159187-55bc-4052-a4c1-a2a5d804290c",
            "dce57451-6042-4ca7-ace1-163ae0cd43a2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 864,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9b13f6d6-99f6-4db0-b8c6-c7ae3d6382c1",
          "title": "Scalability Test Automation for the /tokens API Endpoint",
          "fullFile": "/Users/burcu/Desktop/LI.FI/lifiAutomation/tests/non-functional/scalabilityTests.mjs",
          "file": "/tests/non-functional/scalabilityTests.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should handle the increasing load with 50 concurrent requests",
              "fullTitle": "Scalability Test Automation for the /tokens API Endpoint Should handle the increasing load with 50 concurrent requests",
              "timedOut": false,
              "duration": 1065,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const startTime = performance.now();\nconst requests = Array.from({ length: 50 }, () => sendGetRequest('/tokens'));\nawait Promise.all(requests);\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\nconsole.log(`Response Time for 50 concurrent requests: ${responseTime}ms`);\nif (responseTime > 10000) {\n  throw new Error(`Scalability test failed: Response time exceeded limit for 50 concurrent requests: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "5efe7268-ffd7-4c8f-ba16-38fbc31d1674",
              "parentUUID": "9b13f6d6-99f6-4db0-b8c6-c7ae3d6382c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should handle increasing load with 100 concurrent requests",
              "fullTitle": "Scalability Test Automation for the /tokens API Endpoint Should handle increasing load with 100 concurrent requests",
              "timedOut": false,
              "duration": 1646,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(60000); // Extended timeout to 60 seconds\nconst startTime = performance.now();\nconst requests = Array.from({ length: 100 }, () => sendGetRequest('/tokens'));\nawait Promise.all(requests);\nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\nconsole.log(`Response Time for 100 concurrent requests: ${responseTime}ms`);\nif (responseTime > 50000) {\n  throw new Error(`Scalability test failed: Response time exceeded limit for 100 concurrent requests: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "da370d97-3d10-47cb-83ad-f90d5958b157",
              "parentUUID": "9b13f6d6-99f6-4db0-b8c6-c7ae3d6382c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate API response consistency under Varying Loads",
              "fullTitle": "Scalability Test Automation for the /tokens API Endpoint Should validate API response consistency under Varying Loads",
              "timedOut": false,
              "duration": 2881,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(60000); // Extend timeout to 60 seconds\nconst loads = [10, 50, 100]; // Different request counts\nfor (const load of loads) {\n  const startTime = performance.now();\n  const requests = Array.from({ length: load }, () => sendGetRequest('/tokens'));\n  await Promise.all(requests);\n  const endTime = performance.now();\n  const responseTime = endTime - startTime;\n  \n  console.log(`Response Time for ${load} concurrent requests: ${responseTime}ms`);\n  if (responseTime > load * 1000) { // Allowing 1 second per request as a threshold\n    throw new Error(`Scalability test failed: Response time exceeded limit for ${load} concurrent requests: ${responseTime}ms`);\n  }\n}",
              "err": {},
              "uuid": "0608f01b-1f40-4d4b-877a-a9b527528710",
              "parentUUID": "9b13f6d6-99f6-4db0-b8c6-c7ae3d6382c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate system response under Burst Load of 500 Requests",
              "fullTitle": "Scalability Test Automation for the /tokens API Endpoint Should validate system response under Burst Load of 500 Requests",
              "timedOut": false,
              "duration": 8071,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(180000); // Extend timeout to 3 minutes\nconst batchSize = 50; // Process requests in batches of 50\nconst totalRequests = 500;\nconst numBatches = totalRequests / batchSize;\n  \nconst startTime = performance.now();\n\nfor (let i = 0; i < numBatches; i++) {\n  console.log(`Processing batch ${i + 1}/${numBatches}...`);\n  const requests = Array.from({ length: batchSize }, () => sendGetRequest('/tokens'));\n  await Promise.all(requests);\n}\n  \nconst endTime = performance.now();\nconst responseTime = endTime - startTime;\n  \nconsole.log(`Response Time for 500 concurrent requests: ${responseTime}ms`);\nif (responseTime > 90000) { // Increase acceptable limit to 90 seconds\n  throw new Error(`Scalability test failed: Response time exceeded limit for 500 concurrent requests: ${responseTime}ms`);\n}",
              "err": {},
              "uuid": "d89951f2-7230-40c9-b934-9251092b30fa",
              "parentUUID": "9b13f6d6-99f6-4db0-b8c6-c7ae3d6382c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should handle a sustained load of 10 requests per second for 60 seconds",
              "fullTitle": "Scalability Test Automation for the /tokens API Endpoint Should handle a sustained load of 10 requests per second for 60 seconds",
              "timedOut": false,
              "duration": 75415,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(120000); // Extended timeout for this test\nconst startTime = performance.now();\nfor (let i = 0; i < 60; i++) {\n  const requests = Array.from({ length: 10 }, () => sendGetRequest('/tokens'));\n  await Promise.all(requests);\n  await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait 1 second between batches\n}\nconst endTime = performance.now();\nconst totalTime = endTime - startTime;\n  \nconsole.log(`Total Time for sustained load: ${totalTime}ms`);\nif (totalTime > 120000) {\n  throw new Error(`Scalability test failed: Total time exceeded limit for sustained load: ${totalTime}ms`);\n}",
              "err": {},
              "uuid": "f392f045-e9df-4a27-9003-fe71e9cc7a1f",
              "parentUUID": "9b13f6d6-99f6-4db0-b8c6-c7ae3d6382c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5efe7268-ffd7-4c8f-ba16-38fbc31d1674",
            "da370d97-3d10-47cb-83ad-f90d5958b157",
            "0608f01b-1f40-4d4b-877a-a9b527528710",
            "d89951f2-7230-40c9-b934-9251092b30fa",
            "f392f045-e9df-4a27-9003-fe71e9cc7a1f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 89078,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fe63b947-c4ce-4707-ae2d-fdfd0765f29e",
          "title": "Security Test Automation for the /tokens API Endpoint",
          "fullFile": "/Users/burcu/Desktop/LI.FI/lifiAutomation/tests/non-functional/securityTests.mjs",
          "file": "/tests/non-functional/securityTests.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should validate SSL/TLS connection for secure API communication",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should validate SSL/TLS connection for secure API communication",
              "timedOut": false,
              "duration": 131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const data = await sendGetRequest('/tokens');\n  expect(data).to.exist; // Ensure data is returned\n} catch (error) {\n  if (error.message.includes('certificate') || error.message.includes('SSL')) {\n    throw new Error(`SSL/TLS validation failed: ${error.message}`);\n  }\n  throw new Error(`Request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "1873acd5-a480-4c9c-b80b-b3118b8895df",
              "parentUUID": "fe63b947-c4ce-4707-ae2d-fdfd0765f29e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate CORS policy prevents unauthorized origins",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should validate CORS policy prevents unauthorized origins",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unauthorizedOrigin = 'http://unauthorized.example.com';\ntry {\n  await sendGetRequest('/tokens', {}, { Origin: unauthorizedOrigin });\n} catch (error) {\n  expect(error.message).to.include('CORS');\n}",
              "err": {},
              "uuid": "4f8d8be2-65a0-476e-9b38-133b75ddaaaf",
              "parentUUID": "fe63b947-c4ce-4707-ae2d-fdfd0765f29e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should reject requests without proper Content-Type header",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should reject requests without proper Content-Type header",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidHeaders = { 'Content-Type': 'text/plain' };\ntry {\n  await sendGetRequest('/tokens', {}, invalidHeaders);\n} catch (error) {\n  expect(error.message).to.include('unsupported media type');\n}",
              "err": {},
              "uuid": "2a3d6d4a-254f-46df-a625-5615c0407968",
              "parentUUID": "fe63b947-c4ce-4707-ae2d-fdfd0765f29e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate API response to invalid HTTP methods",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should validate API response to invalid HTTP methods",
              "timedOut": false,
              "duration": 430,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidMethod = 'PATCH'; // Unsupported method\ntry {\n  const response = await fetch('https://li.quest/v1/tokens', { method: invalidMethod });\n  expect(response.status).to.not.equal(200);\n} catch (error) {\n  expect(error.message).to.include('method not allowed');\n}",
              "err": {},
              "uuid": "e5c06eab-9915-4960-8753-c6cfacdd61c0",
              "parentUUID": "fe63b947-c4ce-4707-ae2d-fdfd0765f29e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify the endpoint rejects requests with SQL injection",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should verify the endpoint rejects requests with SQL injection",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); // Extend timeout to 10 seconds\nconst maliciousInput = \"' OR 1=1 --\";\ntry {\n  await sendGetRequest('/tokens', { chains: maliciousInput });\n} catch (error) {\n  expect(error.message).to.include('/chains/0 must'); // Adjusted to match actual validation error message\n}",
              "err": {},
              "uuid": "999f008b-8b9e-4e4a-b61c-cd55e0f52db5",
              "parentUUID": "fe63b947-c4ce-4707-ae2d-fdfd0765f29e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate the API blocks Cross-Site Scripting (XSS) attempts",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should validate the API blocks Cross-Site Scripting (XSS) attempts",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const xssInput = \"<script>alert('XSS')</script>\";\ntry {\n  await sendGetRequest('/tokens', { chains: xssInput });\n} catch (error) {\n  expect(error.message).to.include('/chains/0 must'); // Adjusted to match actual validation error message\n}",
              "err": {},
              "uuid": "54ee3092-194a-42bd-8f2b-dc7e341cc817",
              "parentUUID": "fe63b947-c4ce-4707-ae2d-fdfd0765f29e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should check whether the API enforces the Restricted IP Ranges -> IP Restrictions",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should check whether the API enforces the Restricted IP Ranges -> IP Restrictions",
              "timedOut": false,
              "duration": 92,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const restrictedIP = '0.0.0.0'; // Example restricted IP\nconst params = { ip: restrictedIP };\ntry {\n  const response = await sendGetRequest('/tokens', params);\n  if (!response.status || response.status === 200) {\n    console.warn('API does not enforce IP restrictions. Skipping test.');\n    return; // Skip the test\n  }\n  expect(response.status).to.equal(403); // Validate HTTP status code\n  expect(response).to.have.property('message'); // Ensure `message` exists\n  expect(response.message).to.include('Forbidden'); // Adjust to actual response\n} catch (error) {\n  throw new Error(`Restricted IP test failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "0a5b2f49-ce19-44dc-9d9f-6a9937ea04de",
              "parentUUID": "fe63b947-c4ce-4707-ae2d-fdfd0765f29e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not expose sensitive data in error responses",
              "fullTitle": "Security Test Automation for the /tokens API Endpoint Should not expose sensitive data in error responses",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await sendGetRequest('/invalidEndpoint'); // Intentionally incorrect endpoint\n} catch (error) {\n  expect(error.message).to.not.include('stack trace');\n  expect(error.message).to.not.include('sensitive data');\n  console.log('Verified sensitive data is not exposed in errors');\n}",
              "err": {},
              "uuid": "4d330911-be51-4393-9c77-0cafbb1f4168",
              "parentUUID": "fe63b947-c4ce-4707-ae2d-fdfd0765f29e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1873acd5-a480-4c9c-b80b-b3118b8895df",
            "4f8d8be2-65a0-476e-9b38-133b75ddaaaf",
            "2a3d6d4a-254f-46df-a625-5615c0407968",
            "e5c06eab-9915-4960-8753-c6cfacdd61c0",
            "999f008b-8b9e-4e4a-b61c-cd55e0f52db5",
            "54ee3092-194a-42bd-8f2b-dc7e341cc817",
            "0a5b2f49-ce19-44dc-9d9f-6a9937ea04de",
            "4d330911-be51-4393-9c77-0cafbb1f4168"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1205,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}